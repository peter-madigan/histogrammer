# Generates the necessary histograms for the Module 0+1 muon capture analysis:

#  - Delayed time spectrum
#  - Delayed signal energy (from light system)
#  - Michel tag
#  - Michel energy (from charge system)
#  - Proton score (for reweighting proton background)

import:
  - numpy


datasets:
  prompt:
    path: [analysis/muon_capture/prompt]
  delayed:
    path: [analysis/muon_capture/delayed]
  michel_label:
    path: [analysis/michel_id/michel_label]
  stop_label:
    path: [analysis/stopping_muons/event_sel_reco]
  capture_truth:
    path: [analysis/muon_capture/truth_labels]
  stopping_track:
    path: [analysis/muon_capture/truth_labels/stopping_track, mc_truth/tracks]
  michel_track:
    path: [analysis/muon_capture/truth_labels/michel_track, mc_truth/tracks]
  stop_truth:
    path: [analysis/stopping_muons/event_sel_truth]


histograms:
  michel_label:
    variable: michel_label
    field: michel_flag
    bins: {low: -1, high: 3, n: 4}

  tagged_energy:
    variable: michel_label
    field: michel_e
    bins: {low: -1000, high: 100000, n: 101} # 1MeV

  delayed_time:
    variable: delayed
    field: delay
    bins: {low: -1000, high: 100000, n: 1010} # 10ns

  delayed_energy:
    loop: delayed
    variable: delayed_energy
    bins: {low: -1000, high: 100000, n: 1010} # 1MeV

  delayed_time_energy_correlation:
    variable:
      - delayed
      - delayed_energy
    field:
      - delay
      - null
    bins:
      - {low: -1000, high: 100000, n: 101}
      - {low: -1000, high: 100000, n: 101}

  proton_score:
    loop: stop_label
    variable: proton_score
    bins: {low: -5, high: 5, n: 1001}

variables:
  # Events passing the stopping muon selection and ID'd as Michel decays
  reco_michel:
    expr: "stop_label['sel'] & michel_label['michel_flag'] & (numpy.sum(michel_label['muon_dir'] * michel_label['michel_dir'], axis=-1) > -0.99)"
  # Events passing the stopping muon selection and *not* ID'd as Michel decays
  reco_capt:
    expr: "stop_label['sel'] & ~michel_label['michel_flag'] & (numpy.sum(michel_label['muon_dir'] * michel_label['michel_dir'], axis=-1) > -0.99)"

  # Events reconstructed as Michels that are actual stopping muons with Michel decays
  true_michel:
    expr: "reco_michel & capture_truth['michel'] & stop_truth['sel']"
  # Events reconstructed as captures that are actual stopping mu- without a Michel decay
  true_capt:
    expr: "reco_capt & (capture_truth['stopping_pdg_id'] == 13) & ~capture_truth['michel'] & stop_truth['sel']"

  # Backgrounds contributing to reconstructed Michels
  bkg_michel_capt:
    expr: "reco_michel & (capture_truth['stopping_pdg_id'] == 13) & ~capture_truth['michel'] & stop_truth['sel']"
  bkg_michel_proton:
    expr: "reco_michel & (capture_truth['stopping_pdg_id'] == 2212)"
  bkg_michel_muon:
    expr: "reco_michel & (numpy.abs(capture_truth['stopping_pdg_id']) == 13) & ~stop_truth['sel']"
  bkg_michel_other:
    expr: "reco_michel & ~(true_michel | bkg_michel_capt | bkg_michel_proton | bkg_michel_muon)"

  # Backgrounds contributing to reconstructed captures
  bkg_capt_michel:
    expr: "reco_capt & capture_truth['michel'] & stop_truth['sel']"
  bkg_capt_proton:
    expr: "reco_capt & (capture_truth['stopping_pdg_id'] == 2212)"
  bkg_capt_muon:
    expr: "reco_capt & (numpy.abs(capture_truth['stopping_pdg_id']) == 13) & ~stop_truth['sel']"
  bkg_capt_other:
    expr: "reco_capt & ~(true_capt | bkg_capt_michel | bkg_capt_proton | bkg_capt_muon)"

  # Events that have a track stopping in the detector, but have a dQ/dx profile consistent with a proton
  reco_proton:
    expr: "stop_label['stop'] & (stop_label['muon_loglikelihood_mean'] - stop_label['proton_loglikelihood_mean'] < 0.2576) & (stop_label['proton_loglikelihood_mean'] - stop_label['mip_loglikelihood_mean'] > 0)"

  # Variables that we also want to extract, but require a bit more manipulation
  delayed_energy:
    expr: "delayed['ampl'].sum(axis=-1).sum(axis=-1)"
    filt: False
  proton_score:
    expr: "stop_label['muon_loglikelihood_mean'] - stop_label['proton_loglikelihood_mean']"
    filt: False
  true_delay:
    expr: "michel_track['t0'][:,0] - stopping_track['t0'][:,0]"
    filt: False
